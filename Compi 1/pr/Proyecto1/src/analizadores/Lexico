package analizadores;
import java_cup.runtime.Symbol; 

%% 
%class Lexico
%public 
%line 
%char 
%cup 
%unicode
%ignorecase

%init{ 
    yyline = 1; 
    yychar = 1; 
%init} 

BLANCOS=[ \r\t]+
NUM=[0-9]+("."[  |0-9]+)?
CAD="\""([a-zA-Z0-9]+)"\""
NOM=[a-z]+
CAR="'"([a-zA-Z])"'"


%%

"Evaluar" {return new Symbol(sym.REVALUAR,yyline,yychar, yytext());} 


"Verdadero" {return new Symbol(sym.VERDADERO,yyline,yychar, yytext());}
"Falso" {return new Symbol(sym.FALSO,yyline,yychar, yytext());}
"numero" {return new Symbol(sym.TNUMERO,yyline,yychar, yytext());}
"cadena" {return new Symbol(sym.TCADENA,yyline,yychar, yytext());}
"boolean" {return new Symbol(sym.TBOOLEAN,yyline,yychar, yytext());}
"caracter" {return new Symbol(sym.TCARACTER,yyline,yychar, yytext());}

";" {return new Symbol(sym.PTCOMA,yyline,yychar, yytext());} 
"(" {return new Symbol(sym.PARIZQ,yyline,yychar, yytext());} 
")" {return new Symbol(sym.PARDER,yyline,yychar, yytext());} 
"[" {return new Symbol(sym.CORIZQ,yyline,yychar, yytext());} 
"]" {return new Symbol(sym.CORDER,yyline,yychar, yytext());}
"_" {return new Symbol(sym.GBAJO,yyline,yychar, yytext());}


"+" {return new Symbol(sym.MAS,yyline,yychar, yytext());} 
"-" {return new Symbol(sym.MENOS,yyline,yychar, yytext());} 
"*" {return new Symbol(sym.POR,yyline,yychar, yytext());} 
"/" {return new Symbol(sym.DIVIDIDO,yyline,yychar, yytext());} 
"modulo" {return new Symbol(sym.MODULO,yyline,yychar, yytext());}
"potencia" {return new Symbol(sym.POTENCIA,yyline,yychar, yytext());}


"mayor" {return new Symbol(sym.MAYOR,yyline,yychar, yytext());}
"menor" {return new Symbol(sym.MENOR,yyline,yychar, yytext());}
"mayor_o_igual" {return new Symbol(sym.MAYOROIGUAL,yyline,yychar, yytext());}
"menor_o_igual" {return new Symbol(sym.MENOROIGUAL,yyline,yychar, yytext());}
"es_igual" {return new Symbol(sym.ESIGUAL,yyline,yychar, yytext());}
"es_diferente" {return new Symbol(sym.ESDIFERENTE,yyline,yychar, yytext());}


"or" {return new Symbol(sym.OR,yyline,yychar, yytext());}
"and" {return new Symbol(sym.AND,yyline,yychar, yytext());}
"not" {return new Symbol(sym.NOT,yyline,yychar, yytext());}


"inicio" {return new Symbol(sym.INICIO,yyline,yychar, yytext());}
"fin" {return new Symbol(sym.FIN,yyline,yychar, yytext());}


"ingresar" {return new Symbol(sym.INGRESAR,yyline,yychar, yytext());}
"como" {return new Symbol(sym.COMO,yyline,yychar, yytext());}
"con_valor" {return new Symbol(sym.CONVALOR,yyline,yychar, yytext());}


"," {return new Symbol(sym.COMA,yyline,yychar, yytext());}
"->" {return new Symbol(sym.ASIGNACION,yyline,yychar, yytext());}


"si" {return new Symbol(sym.SI,yyline,yychar, yytext());}
"fin_si" {return new Symbol(sym.FINSI,yyline,yychar, yytext());}
"de_lo_contrario" {return new Symbol(sym.DELOCONTRARIO,yyline,yychar, yytext());}
"o_si" {return new Symbol(sym.OSI,yyline,yychar, yytext());}



\n {yychar=1;}

{BLANCOS} {} 
{NUM} {return new Symbol(sym.NUMERO,yyline,yychar, yytext());}
{CAD} {return new Symbol(sym.CADENA,yyline,yychar, yytext());}
{CAR} {return new Symbol(sym.CARACTER,yyline,yychar, yytext());}
{NOM} {return new Symbol(sym.NOMBRE,yyline,yychar, yytext());}

. {
    System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yychar);
}