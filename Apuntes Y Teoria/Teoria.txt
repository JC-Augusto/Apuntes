_____________________________________________________________________________________________________________________________________
DATOS DE OPERACIONES

print(20//3) ----------------------- Arroja el valor de la divición exacta (el cociente sin el residuo)
print(10%5) ------------------------ Devuelve el valor del modulo( el residuo de la divición)
print(5**2) ------------------------ Se usa para elevar a una potencia( sepuede usar para raices)
_____________________________________________________________________________________________________________________________________

DATOS PARA CADENAS

Para imprimir cadenas con comillas(") se debe de colocar una barra invertida antes (\) 

Print("hola"*3) -------------------- Imprimirá 3 veces el "hola"

para asignar variables, solo se coloca el nombre de la variable y su valor. 

ej: 
x = 15
x = "esto es una cadena"

_____________________________________________________________________________________________________________________________________

ENTRADA DE TEXTO
Para ingresar texto se utiliza: 

x = input"Se agrega texto, ej: Cual es su nombre?") 

para usar numeros se debe castear: Castea a numeros (int) a cadena (str)

x = int(input())

_____________________________________________________________________________________________________________________________________

OPERACIONES CORTAS

x = 3
x *= 5
print (x)     -------------------------- Imprimirá el valor 15

x = a
x *=3 
print x       -------------------------- Imprimirá "aaa"

_____________________________________________________________________________________________________________________________________

VALORES BOOLEANOS 

Se pueden asignar los valores (True or False) de forma directa, o hacer que
retorne el valor haciendo alguna comparacion:

valor_Booleano = True       ------------------   asignada de forma directa 

print(3 == 4)  -------------------------------   retornara un False ya que no es correcto (tambien se puede con cadenas de texto)

TAMBIEN SE PUEDE DEVOLVER VALORES USANDO LOS DIFERENTES VALORES BOOLEANOS 
COMO: 
!=  DIFERENTE DE
< MENOR que
> MAYOR QUE 

_____________________________________________________________________________________________________________________________________

if STATEMENTS (Declaraciones si)

if expression:
    STATEMENTS

_____________________________________________________________________________________________________________________________________

else Statements 

x = 5
if x == 5:
    print ("Yes")
else: 
    print("No")

_____________________________________________________________________________________________________________________________________

elif Statements

num = 3
if num == 1:
    print("One")
elif num == 2:
    print("Two)
elif num == 3:
    print ("Three")
else:
    print("otro numero")

_____________________________________________________________________________________________________________________________________

LOGICA BOOLEANA

print(1 == 1 and 2 == 2)            ------------------ Forma directa
print(1 == 1 or 2 >= 2)            ------------------ Forma directa

if (1 == 1 ) and (2+2 >3):
    print ("True")
else: 
    print ("False")

_____________________________________________________________________________________________________________________________________

BOOLEAN NOT
Invierte el valor del valor booleano

print (Not 1 == 1)  ---------------------------- Devolvera como resultado "False"
print (Not 3 > 5)   ---------------------------- Devolvera como resultado "True"

_____________________________________________________________________________________________________________________________________

PRIORIDAD DEL OPERADOR 

print (False == False or True)     ------------------------ Devuelve True
print (False == (False or True))   ------------------------ Devuelve False
print ((False == False) or True)   ------------------------ Devuelve True

_____________________________________________________________________________________________________________________________________

LISTAS
en python se puede anidar listas, y no tienen que se precisamente del mismo tipo. 

palabras = ["Hola", "mundo", "!"]
print (palabras[0])
print (palabras[1])
print (palabras[2])

numero = 3 
cosas = ["texto", 0, [1,2, "numero"], 4.56]
print (cosas[1])
print (cosas[2])
print (cosas[2][2])
print (cosas[3])

matriz = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]

print (matriz[1][3])            ------------------------------------------- Imprimirá el 9

_____________________________________________________________________________________________________________________________________

DATOS CURIOSOS LISTAS

texto = "Hola mundo"
print (texto[6])      ------------------------------------------- La cadena se toma como vector, y se imprimira la "u"


_____________________________________________________________________________________________________________________________________

OPERACIONS DE LAS LISTAS 

palabras = ["Hola", "mundo", "!"]

palabras [2] = "xD"                     ------------------------- Se le asigna un nuevo valor al 3er valor del vector (lista)

print (palabras[0])
print (palabras[1])
print (palabras[2])

TAMBIEN SE PUEDE AGREGAR Y MULTIPLICAR EJ:

numeros = [1,2,3]

print (numeros+[4,5,6])              ---------------------------- Se agrega el 4,5,6 al vector
print (numeros *3)                   ---------------------------- Se imprime 3 veces el venctor numeros 



VERIVICAR SI EXISTE UNA PALABRA EN UN VECTOR 

palabras = ["huevos", "perro", "gato", "loro", "vaso"]
print("huevos" in palabras)           ---------------------------- Devolvera un "True" ya que la palabra si esta.
print("hola" in palabras)             ---------------------------- Devolvera un "False" ya que la palabra no esta en el vector

print (not "perro" in palabras)       ---------------------------- "not" devolvera si la palabra no esta, en este caso "False" ya que si esta
print (not "queso" in palabras)       ---------------------------- Devolvera un True, ya que la palabra en efecto, no esta en el vector


_____________________________________________________________________________________________________________________________________

FUNCIONES DE LISTA (LIST FUNCTION)

****** Medoto append *****

