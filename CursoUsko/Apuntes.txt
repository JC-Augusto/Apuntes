********** TUPLAS **********

Forma base:

tupla = ("hola",2,3,4,"otro elemento",True,("tupla en tupla",2,3))

las tuplas se pueden sumar

Metodos:

tupla.count(x)    >>>>>>>>>>>>>> Cuenta Cuantas veces aparece el valor "x" en la tupla

tupla.index(x)    >>>>>>>>>>>>>> Indica el indice de cuando se encontro el valor x

_______________________________________________________________________________________________________________________

********** LISTAS **********

Las listas son estructuras de datos que nos perimiten almacenar distintos valores, equivalentes a los 
arrays en otros lenguajes, son estructuras dinamicas 

Forma base:

lista1 = ["Oscar", 3,4,5,True,"hola"]

se puede inprimir de difersas formas

Print(Lista1[::])  Primer espacio inicio, segundo espacio fin, tercer espacio multiplicidad. // (si es negativo es a la inversa)

##### Metodos ####

lista1.append("hola")  >>>>>>>>>>>>>>> Se le agrega el elemento al final de la lista1

Lista1.incert("hola",1,3) >>>>>>>>>>>> Se agruega a la lista 

lista1.index("hola") >>>>>>>>>>>>>>>>> Devuelve el indice de ucando encuentra el objeto buscado

lista1.remove("x")  >>>>>>>>>>>>>>>>>> Se elimina el valor de X ingresdo

lista1.pop()    >>>>>>>>>>>>>>>>>>>>>> Se elimina el ultimo valor de la lista

print("hola" in lista1)  >>>>>>>>>>>>> Devuelve un valor booleano si se ecuentra 

_______________________________________________________________________________________________________________________

********** DICCIONARIOS **********

Son Estructuras de datos que nos permiten almacenar distintos valores 
 
- Los datos se almacenan asociados a una clase unica
- Tenemos una relacion -clave-valor-

Forma base: 

miDiccionario = {"España":"Madrid", "Peru":"Lima","Alemania":"Berlin}

### Metodos ###

print(miDiccionario["Peru"])  >>>>>>>>> Imprimira "Lima"  (La clave es "Peru" y el valor "Lima")

miDiccionario["Venezuela"] = "Caracas"   >>>>> Agrega una palabra al diccionario 

miDiccionario["España"] = "Barcelona" >>>>>>>> Se cambio el diccionario "España" ya que ya exixte

del miDiccionario["España"] >>>>>>>>>>>>>>>>>> Borra la palabra asociada en el diccionario

_______________________________________________________________________________________________________________________

********** CONVINACION TUPLAS Y DICCIONARIOS **********

llaves = ("España", "Francia", "Inglaterra")

dicPalabras = {llaves[0]: "Madrid", llaves[1] : Paris}


Se pueden agregar diccionarios dentro de otros

datos = {"Ape":"Garcia" , "Años":{1 : 100, 2 : 21, 3 : 40}}

print([Años])  >>>>>>>>>>>>>>>> Se imprimira el valos o diccionario dentro de la clave Años

print(datos.get("Ape","Oscar"))  >>>>>>>>>>> Si esta la llave, devuelve su valor. Si no esta Devuelve "Oscar" el valor especificado

print(datos.keys()) >>>>>>>>>> Imprimira las llaves de los diccionarios
print(datos.values()) >>>>>>>> Imprimira los valores del diccionario 

valores = list(datos.values)  >>>>>>>>>>> Convierte a una lista los valores
valores = tuple(datos.values) >>>>>>>>>>> Convierte a una tupla

_______________________________________________________________________________________________________________________

********** VALORES BOOLEANOS **********

and 
or 
not 

_______________________________________________________________________________________________________________________

********** RANGE **********

numeros = range (,,)  >>>>>>>>>>> Primer espacio es inicio, segundo es el fin y tercer espacio la multiplicidad

_______________________________________________________________________________________________________________________

********** BUCLE FOR **********

Por iteracion normal:

for x in range (0,10):
    print("valor actual: "+str(x))

Utilizando una forma mejorada: USANDO FORMAT



for x in range (0,10):
    print("valor actual: {0}".format(x))            >>>> En corchetes indica unicamente la cantidad de usos (mejor ejemplo abajo)


ejemplo 2:

for i in range(1,13):
    print("{0} x {1} es: {2}".format(i,i,i*i))      >>>> Se colocaron 0,1,2 ya que se uso 3 veces 
                                                    >>>> Cada uso, debe llevar como se usara en la clase FORMAT

ejemplo 3:

for nom in ["karen","Oscar","Hector","Leonardo"]:
    print("Cantidad de letras de {0} es {1}".format(nom,len(nom)))


_______________________________________________________________________________________________________________________

********** IF CON TUPLAS **********

print("***CURSOS***")

curso = input("ingrese un curso: ")
cursos = ("Matemática", "Biologia", "Ciencias","Formacion")

if curso in cursos:
    print("El curso {0} si se encuentra.".format(curso))
else:
    print("El curso no se encuentra")


_______________________________________________________________________________________________________________________

********** FACTORIAL DE UN NUMERO : USANDO FORMAT **********

numero = int(input("Ingrese un numero: "))

factorial = 1
for i in range(1,numero+1):
    factorial = factorial * i

print ("El factorial de {0} es: {1}".format(numero,factorial))

_______________________________________________________________________________________________________________________

********** BUCLE WHILE **********

indice = 1
while indice < 10:
    print("El valor actual es {0}".format(indice))
    indice +=1
print("bucle terminado")

_______________________________________________________________________________________________________________________

********** USO DE: BREAK, CONTINUE, PASS

BREAK: Corta un buble (lo termina)

CONTINUE: Pasa a la siguiente iteracion (no lo corta, salta un a partir de que encuentra la instrucción)

PASS: Hace que continue de forma normal (sirve al crear algo sin instruccions y tenemos una identación)

_______________________________________________________________________________________________________________________

********** GENERADORES **********

Permite extraer valores de una función y almacenarlo (de uno en uno ) en objetos iterables (que se pueden correr)
sin la nencesidad de almacenar TODOS A LA VEZ en la memoria RAM

////////////////// EJEMPLO SIN GENERADOR:

def generarMultipolosDe7(limite):
    numero = 1
    listaNumeros = []

    while numero <= limite:
        listaNumeros.append(numero*7)
        numero +=1
    return listaNumeros

print(generarMultipolosDe7(4))              >>>>>> Genera una lista de valores multiplos de 7


/////////////////// EJEMPLO CON GENERADOR

def generadorMultiplosDe7(limite):
    numero = 1
    while numero <= limite:
        yield numero * 7 
        numero +=1

obtenerMultiplosDe7 = generadorMultiplosDe7(5)

##### Una forma de imprimir todos:

for n in obtenerMultiplosDe7:
    print(n)

#### Una forma de Imprimir 1 por uno: 

print(next(obtenerMultiplosDe7))
print("aca hay 1000 lineas de codigo")
print(next(obtenerMultiplosDe7))
print("aca hay muchas lineas de codigo")
print(next(obtenerMultiplosDe7))


_______________________________________________________________________________________________________________________

********** EXCEPCIONES - TRY EXCEPT FINALLY **********

ESTRUCTURA:

try:
    Instrucciones
except:
    Instrucciones si falla
finally:
    Instrucciones que hacer sin importar que  >>>>>>>>>>>> El finally no es indispensable 

_______________________________________________________________________________________________________________________

********** MODULOS **********

Es un archivo con extención .py o .pyc (python compilado), que posee su propio espacio de nombres 
y que puede contener variables, funciones, clases o incluso otros modulos.

Sirve para poder organizar el código y poder reutilizarlo mejor. 

forma de llamar a otro modulo:

llamando por funciones:

from carpeta.carpeta.carpeta(etc) import funcion1, funcion2, funcion3

llamando al modulo completo:

form carpeta.carpeta.carpeta(etc) import funcion *

_______________________________________________________________________________________________________________________

************ CLASES ********************************
Se pordria decir que esuna plantilla, la representación de un objeto de la realidad que nos sirve
al mometo de programar. 

una clase puede ir almacenando funciones dentro, y va dentro de un archivo de

clase nombre(): 

------------ EN POO -----------------
EJEMPLO:

class Persona(): 
    #Propiedades y atributos
    apellidos = ""
    nombres = ""
    edad = 0
    despierta = False

    # funcionalidades
    def despertar(self):
        #self: es un parametro que hace referencia a la istancia u objeto perteneciente a la clase.
        self.despierta = True 
        print("Buen dia.")

persona1 = Persona()
persona1.apellidos = "Hernandez Fuentes"
print(persona1.apellidos)
persona1.despertar()
print(persona1.despierta)

persona2 = Persona()
persona2.apellidos = "Garcia Fuentes"
print(persona2.apellidos)
print(persona2.despierta)

________________________________________________________________________________________________________________________________

********** METODO : __init__()    **************************

El metodo init es el constructor de la clase.

EJEMPLO: de forma normal sin usarlo de constructor especifico.

class Curso(): 

    def __init__(self):
        self.nombre = "Matemática"
        self.creditos = 5
        self.curso = "Ingenieria"

curso1 = Curso()
print(curso1.nombre)

EJEMPLO: usandolo como constructor 

class Curso(): 

    def __init__(self,nombre,creditos, profesion):
        self.nombre = nombre
        self.creditos = creditos
        self.curso = profesion

curso1 = Curso("Matemática",5,"Ingenieria")
print(curso1.nombre)

curso1 = Curso("Sociales",3,"Ingenieria")
print(curso1.nombre)

________________________________________________________________________________________________________________________________

************************ ENCAPSULAMIENTO DE DATOS ********************************
Los atributos que se encuentre encapuslados, solo se pudrán usar dentro de la clase misma. 
En este caso: el atributo encapsulado es: "imparticion" y para encapsularlo se uso "__" (doble guion bajo adelante del atributo).

Se puede acceder al atributo desde la clase, pero si se intenta imprimir o llamarlo fuera de la clase marcara error 

class Curso(): 

    def __init__(self,nombre,creditos, profesion):
        self.nombre = nombre
        self.creditos = creditos
        self.curso = profesion
        self.__imparticion = "Presencial" #Propiedad encapsulada

    def mostrarDatos(self):
        dat = "Nombre: {0} / Creditos: {1} / Modo de impartición: {2}"
        print(dat.format(self.nombre, self.creditos, self.__imparticion))

curso1 = Curso("Matemática",5,"Ingenieria")
curso1.mostrarDatos()
print(curso1.nombre)
#print(curso1.__imparticion) >>>>>>>>>>>>>>> esta en forma de comentario para que no tire error ya que el atributo no existe fuera de la clase por estar encapsulado

________________________________________________________________________________________________________________________________________________ 


